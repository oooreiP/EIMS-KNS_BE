# This is the name of your GitHub Action workflow
name: Build and Deploy EIMS API

# This workflow runs on any push to the 'main' or 'master' branch
on:
  push:
    branches:
      - main
      - master

jobs:
  # --- JOB 1: BUILD AND PUSH THE DOCKER IMAGE ---
  build-and-push:
    runs-on: ubuntu-latest # Use a GitHub-hosted server
    
    steps:
      # 1. Get your code from the repository
      - name: Check out the repo
        uses: actions/checkout@v4

      # 2. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Build and push the image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          #Set the correct context and file path
          context: ./EIMS
          file: ./EIMS/Dockerfile
          
          push: true
          # Tag the image with 'latest' (for deployment)
          # and the unique GitHub run number (for history)
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/eims-api:lastest
            ${{ secrets.DOCKERHUB_USERNAME }}/eims-api:${{ github.run_number }}

  # --- JOB 2: DEPLOY THE IMAGE TO DROPLET ---
  deploy-to-droplet:
    runs-on: ubuntu-latest
    needs: build-and-push 
    
    steps:
      - name: Deploy to DigitalOcean Droplet via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            # This is the script that will run ON YOUR SERVER
            
            # 1. Navigate to your app directory
            cd /opt/eims
            
            # 2. Log in to Docker Hub (on the server) to pull private images
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            
            # 3. Pull the new 'latest' image from Docker Hub
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/eims-api:latest
            
            # 4. Restart the 'api' service using Docker Compose
            #    Docker Compose is smart and will ONLY restart the 'api'
            #    container because its image has changed. 
            #    The 'db' and 'pgadmin' containers will be untouched.
            docker compose up -d
            
            # 5. Clean up old, unused images to save disk space
            docker image prune -af

