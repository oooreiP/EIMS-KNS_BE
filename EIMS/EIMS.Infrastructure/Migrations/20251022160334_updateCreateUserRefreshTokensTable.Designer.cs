// <auto-generated />
using System;
using EIMS.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EIMS.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251022160334_updateCreateUserRefreshTokensTable")]
    partial class updateCreateUserRefreshTokensTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EIMS.Domain.Entities.AuditLogs", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuditId"));

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("AuditId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Customers", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HistoryId"));

                    b.Property<int>("ActionType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<int>("PerformedBy")
                        .HasColumnType("integer");

                    b.Property<int>("PerformedUserUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReferenceInvoiceId")
                        .HasColumnType("integer");

                    b.HasKey("HistoryId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PerformedUserUserId");

                    b.ToTable("InvoiceHistory");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceStatements", b =>
                {
                    b.Property<int>("StatementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StatementId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StatementCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StatementDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("TotalInvoices")
                        .HasColumnType("integer");

                    b.HasKey("StatementId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("CustomerId");

                    b.ToTable("InvoiceStatements");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceTemplates", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TemplateId"));

                    b.Property<string>("CurrencySymbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasSignatureArea")
                        .HasColumnType("boolean");

                    b.Property<string>("InvoiceForm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceSerial")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LayoutConfig")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LineItemFields")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("NumberingRuleId")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowBuyerInfo")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowTaxCode")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("TemplateId");

                    b.HasIndex("NumberingRuleId");

                    b.ToTable("InvoiceTemplates");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Invoices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductsProductId")
                        .HasColumnType("integer");

                    b.Property<int>("SignedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SignedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SignedUserUserId")
                        .HasColumnType("integer");

                    b.Property<int>("StatementId")
                        .HasColumnType("integer");

                    b.Property<int>("StatementsStatementId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("TaxAuthorityStatus")
                        .HasColumnType("integer");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductsProductId");

                    b.HasIndex("SignedUserUserId");

                    b.HasIndex("StatementsStatementId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.NumberingRules", b =>
                {
                    b.Property<int>("NumberingRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NumberingRuleId"));

                    b.Property<int>("CurrentNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResetPolicy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.HasKey("NumberingRuleId");

                    b.ToTable("NumberingRules");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("numeric");

                    b.Property<string>("BillingPeriod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.TaxAuthorityLogs", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogId"));

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<string>("ResponseCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResponseMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LogId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("TaxAuthorityLogs");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.AuditLogs", b =>
                {
                    b.HasOne("EIMS.Domain.Entities.Users", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceHistory", b =>
                {
                    b.HasOne("EIMS.Domain.Entities.Invoices", "Invoice")
                        .WithMany("InvoiceHistories")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.Users", "PerformedUser")
                        .WithMany("PerformedHistories")
                        .HasForeignKey("PerformedUserUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("PerformedUser");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceStatements", b =>
                {
                    b.HasOne("EIMS.Domain.Entities.Users", "Creator")
                        .WithMany("CreatedStatements")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.Customers", "Customer")
                        .WithMany("InvoiceStatements")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Creator");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceTemplates", b =>
                {
                    b.HasOne("EIMS.Domain.Entities.NumberingRules", "NumberingRule")
                        .WithMany("InvoiceTemplates")
                        .HasForeignKey("NumberingRuleId");

                    b.Navigation("NumberingRule");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Invoices", b =>
                {
                    b.HasOne("EIMS.Domain.Entities.Customers", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.Products", "Products")
                        .WithMany("Invoices")
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.Users", "SignedUser")
                        .WithMany("SignedInvoices")
                        .HasForeignKey("SignedUserUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.InvoiceStatements", "Statements")
                        .WithMany("Invoices")
                        .HasForeignKey("StatementsStatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.InvoiceTemplates", "Template")
                        .WithMany("Invoices")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Products");

                    b.Navigation("SignedUser");

                    b.Navigation("Statements");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.TaxAuthorityLogs", b =>
                {
                    b.HasOne("EIMS.Domain.Entities.Invoices", "Invoice")
                        .WithMany("TaxAuthorityLogs")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("EIMS.Domain.Entities.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Customers", b =>
                {
                    b.Navigation("InvoiceStatements");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceStatements", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceTemplates", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Invoices", b =>
                {
                    b.Navigation("InvoiceHistories");

                    b.Navigation("TaxAuthorityLogs");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.NumberingRules", b =>
                {
                    b.Navigation("InvoiceTemplates");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Products", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Users", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("CreatedStatements");

                    b.Navigation("PerformedHistories");

                    b.Navigation("SignedInvoices");
                });
#pragma warning restore 612, 618
        }
    }
}
