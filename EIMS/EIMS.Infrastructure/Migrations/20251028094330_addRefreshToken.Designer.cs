// <auto-generated />
using System;
using EIMS.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EIMS.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251028094330_addRefreshToken")]
    partial class addRefreshToken
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EIMS.Domain.Entities.AuditLog", b =>
                {
                    b.Property<int>("AuditID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuditID"));

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("AuditID");

                    b.HasIndex("UserID");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTaxable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal?>("VATRate")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Company", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompanyID"));

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BankName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("CompanyID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvoiceID"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<string>("DigitalSignature")
                        .HasColumnType("text");

                    b.Property<long>("InvoiceNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("InvoiceStatusID")
                        .HasColumnType("integer");

                    b.Property<int>("IssuerID")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("PaymentDueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QRCodeData")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("SalesID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SignDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("SubtotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TaxAuthorityCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TemplateID")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TotalAmountInWords")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("VATAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("VATRate")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("InvoiceID");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerID");

                    b.HasIndex("InvoiceStatusID");

                    b.HasIndex("IssuerID");

                    b.HasIndex("SalesID");

                    b.HasIndex("TemplateID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceHistory", b =>
                {
                    b.Property<int>("HistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HistoryID"));

                    b.Property<string>("ActionType")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InvoiceID")
                        .HasColumnType("integer");

                    b.Property<int>("PerformedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("ReferenceInvoiceID")
                        .HasColumnType("integer");

                    b.HasKey("HistoryID");

                    b.HasIndex("InvoiceID");

                    b.HasIndex("PerformedBy");

                    b.HasIndex("ReferenceInvoiceID");

                    b.ToTable("InvoiceHistories");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceItem", b =>
                {
                    b.Property<int>("InvoiceItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvoiceItemID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("integer");

                    b.Property<int>("InvoiceID")
                        .HasColumnType("integer");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("VATAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("InvoiceItemID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("InvoiceID");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceStatement", b =>
                {
                    b.Property<int>("StatementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StatementID"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("CreatorUserID")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("StatementCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StatementDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatementStatusStatusID")
                        .HasColumnType("integer");

                    b.Property<int>("StatusID")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("TotalInvoices")
                        .HasColumnType("integer");

                    b.HasKey("StatementID");

                    b.HasIndex("CreatorUserID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StatementStatusStatusID");

                    b.ToTable("InvoiceStatements");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceStatus", b =>
                {
                    b.Property<int>("InvoiceStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvoiceStatusID"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("InvoiceStatusID");

                    b.ToTable("InvoiceStatuses");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceTemplate", b =>
                {
                    b.Property<int>("TemplateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TemplateID"));

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("integer");

                    b.Property<long>("CurrentInvoiceNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("InvoiceTypeID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LayoutDefinition")
                        .HasColumnType("text");

                    b.Property<int>("SerialID")
                        .HasColumnType("integer");

                    b.Property<int>("SerialStatusID")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("TemplateTypeID")
                        .HasColumnType("integer");

                    b.HasKey("TemplateID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("SerialStatusID");

                    b.HasIndex("TemplateTypeID");

                    b.ToTable("InvoiceTemplates");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceType", b =>
                {
                    b.Property<int>("InvoiceTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvoiceTypeID"));

                    b.Property<string>("Symbol")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("TypeName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("InvoiceTypeID");

                    b.ToTable("InvoiceTypes");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Content")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("NotificationStatusID")
                        .HasColumnType("integer");

                    b.Property<int>("NotificationTypeID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("NotificationID");

                    b.HasIndex("NotificationStatusID");

                    b.HasIndex("NotificationTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.NotificationStatus", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StatusID"));

                    b.Property<string>("StatusName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("StatusID");

                    b.ToTable("NotificationStatuses");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.NotificationType", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeID"));

                    b.Property<string>("TypeName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("TypeID");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Prefix", b =>
                {
                    b.Property<int>("PrefixID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PrefixID"));

                    b.Property<string>("PrefixName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("PrefixID");

                    b.ToTable("Prefixes");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Serial", b =>
                {
                    b.Property<int>("SerialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SerialID"));

                    b.Property<int>("InvoiceTypeID")
                        .HasColumnType("integer");

                    b.Property<int>("PrefixID")
                        .HasColumnType("integer");

                    b.Property<int>("SerialStatusID")
                        .HasColumnType("integer");

                    b.Property<string>("Tail")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Year")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.HasKey("SerialID");

                    b.HasIndex("InvoiceTypeID");

                    b.HasIndex("PrefixID");

                    b.HasIndex("SerialStatusID");

                    b.ToTable("Serials");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.SerialStatus", b =>
                {
                    b.Property<int>("SerialStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SerialStatusID"));

                    b.Property<string>("StatusName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("SerialStatusID");

                    b.ToTable("SerialStatuses");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.StatementStatus", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StatusID"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("StatusID");

                    b.ToTable("StatementStatuses");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.TaxApiLog", b =>
                {
                    b.Property<int>("TaxLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaxLogID"));

                    b.Property<int>("InvoiceID")
                        .HasColumnType("integer");

                    b.Property<string>("RequestPayload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResponsePayload")
                        .HasColumnType("text");

                    b.Property<int>("TaxApiStatusID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TaxLogID");

                    b.HasIndex("InvoiceID");

                    b.HasIndex("TaxApiStatusID");

                    b.ToTable("TaxApiLogs");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.TaxApiStatus", b =>
                {
                    b.Property<int>("TaxApiStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaxApiStatusID"));

                    b.Property<string>("StatusName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("TaxApiStatusID");

                    b.ToTable("TaxApiStatuses");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.TemplateType", b =>
                {
                    b.Property<int>("TemplateTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TemplateTypeID"));

                    b.Property<string>("TypeCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("TemplateTypeID");

                    b.ToTable("TemplateTypes");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("RoleID")
                        .HasColumnType("integer");

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("EIMS.Domain.Entities.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("EIMS.Domain.Entities.Company", "Company")
                        .WithMany("Invoices")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.InvoiceStatus", "InvoiceStatus")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoiceStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.User", "Issuer")
                        .WithMany("IssuedInvoices")
                        .HasForeignKey("IssuerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.User", "Sales")
                        .WithMany("SalesInvoices")
                        .HasForeignKey("SalesID");

                    b.HasOne("EIMS.Domain.Entities.InvoiceTemplate", "Template")
                        .WithMany("Invoices")
                        .HasForeignKey("TemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("InvoiceStatus");

                    b.Navigation("Issuer");

                    b.Navigation("Sales");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceHistory", b =>
                {
                    b.HasOne("EIMS.Domain.Entities.Invoice", "Invoice")
                        .WithMany("HistoryEntries")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.User", "Performer")
                        .WithMany("HistoryActions")
                        .HasForeignKey("PerformedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.Invoice", "ReferenceInvoice")
                        .WithMany("ReferencedByHistory")
                        .HasForeignKey("ReferenceInvoiceID");

                    b.Navigation("Invoice");

                    b.Navigation("Performer");

                    b.Navigation("ReferenceInvoice");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceItem", b =>
                {
                    b.HasOne("EIMS.Domain.Entities.Category", "Category")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceStatement", b =>
                {
                    b.HasOne("EIMS.Domain.Entities.User", "Creator")
                        .WithMany("CreatedStatements")
                        .HasForeignKey("CreatorUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.Customer", "Customer")
                        .WithMany("Statements")
                        .HasForeignKey("CustomerID");

                    b.HasOne("EIMS.Domain.Entities.StatementStatus", "StatementStatus")
                        .WithMany("InvoiceStatements")
                        .HasForeignKey("StatementStatusStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Customer");

                    b.Navigation("StatementStatus");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceTemplate", b =>
                {
                    b.HasOne("EIMS.Domain.Entities.User", "CreatedBy")
                        .WithMany("CreatedTemplates")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.Serial", "Serial")
                        .WithMany("InvoiceTemplates")
                        .HasForeignKey("SerialStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.TemplateType", "TemplateType")
                        .WithMany("InvoiceTemplates")
                        .HasForeignKey("TemplateTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Serial");

                    b.Navigation("TemplateType");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Notification", b =>
                {
                    b.HasOne("EIMS.Domain.Entities.NotificationStatus", "NotificationStatus")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationStatus");

                    b.Navigation("NotificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("EIMS.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Serial", b =>
                {
                    b.HasOne("EIMS.Domain.Entities.InvoiceType", "InvoiceType")
                        .WithMany("Serials")
                        .HasForeignKey("InvoiceTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.Prefix", "Prefix")
                        .WithMany("Serials")
                        .HasForeignKey("PrefixID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.SerialStatus", "SerialStatus")
                        .WithMany("Serials")
                        .HasForeignKey("SerialStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceType");

                    b.Navigation("Prefix");

                    b.Navigation("SerialStatus");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.TaxApiLog", b =>
                {
                    b.HasOne("EIMS.Domain.Entities.Invoice", "Invoice")
                        .WithMany("TaxApiLogs")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EIMS.Domain.Entities.TaxApiStatus", "TaxApiStatus")
                        .WithMany("TaxApiLogs")
                        .HasForeignKey("TaxApiStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("TaxApiStatus");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.User", b =>
                {
                    b.HasOne("EIMS.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Category", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Company", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Statements");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("HistoryEntries");

                    b.Navigation("InvoiceItems");

                    b.Navigation("ReferencedByHistory");

                    b.Navigation("TaxApiLogs");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceStatus", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceTemplate", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.InvoiceType", b =>
                {
                    b.Navigation("Serials");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.NotificationStatus", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Prefix", b =>
                {
                    b.Navigation("Serials");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.Serial", b =>
                {
                    b.Navigation("InvoiceTemplates");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.SerialStatus", b =>
                {
                    b.Navigation("Serials");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.StatementStatus", b =>
                {
                    b.Navigation("InvoiceStatements");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.TaxApiStatus", b =>
                {
                    b.Navigation("TaxApiLogs");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.TemplateType", b =>
                {
                    b.Navigation("InvoiceTemplates");
                });

            modelBuilder.Entity("EIMS.Domain.Entities.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("CreatedStatements");

                    b.Navigation("CreatedTemplates");

                    b.Navigation("HistoryActions");

                    b.Navigation("IssuedInvoices");

                    b.Navigation("Notifications");

                    b.Navigation("RefreshTokens");

                    b.Navigation("SalesInvoices");
                });
#pragma warning restore 612, 618
        }
    }
}
